name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, product-service, notification-service]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js (for user-service)
      if: matrix.service == 'user-service'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Set up Python (for product/notification services)
      if: matrix.service == 'product-service' || matrix.service == 'notification-service'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Run tests
      run: |
        cd applications/${{ matrix.service }}
        if [ -f "package.json" ]; then
          npm install
          npm test || true
        elif [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
          python -m pytest || true
        fi

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [frontend, user-service, product-service, order-service, notification-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_USERNAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./applications/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.34.0'
    
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
    
    - name: Update Kubernetes manifests
      run: |
        # Update image tags in manifests
        for service in frontend user-service product-service order-service notification-service; do
          kubectl set image deployment/${service} ${service}=${{ env.DOCKER_USERNAME }}/${service}:${{ github.sha }} -n microservices --record
        done
    
    - name: Wait for rollout
      run: |
        for service in frontend user-service product-service order-service notification-service; do
          kubectl rollout status deployment/${service} -n microservices --timeout=300s
        done
    
    - name: Verify deployment
      run: |
        kubectl get pods -n microservices
        kubectl get services -n microservices

  helm-deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[helm]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.13.0'
    
    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
    
    - name: Update Helm dependencies
      run: |
        cd helm-charts/microservices-platform
        helm dependency update
    
    - name: Deploy with Helm
      run: |
        helm upgrade --install microservices-platform \
          ./helm-charts/microservices-platform \
          --namespace microservices \
          --create-namespace \
          --set global.imageTag=${{ github.sha }} \
          --wait --timeout 10m